#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// 배열을 랜덤하게 생성하는 함수
void GenerateArray(double *arr, int size, double min, double max) {
	for (int i = 0; i < size; i++) {
		arr[i] = ((double)rand() / RAND_MAX) * (max - min) + min; // min ~ max 사이의 값 생성
	}
}

// 배열을 정렬하는 함수 (오름차순/내림차순)
void CalcSortArray(double *arr, int size, int ascending) {
	for (int i = 0; i < size - 1; i++) {
		for (int j = i + 1; j < size; j++) {
			// 오름차순일 경우, 작은 값이 앞으로 이동
			if ((ascending && arr[i] > arr[j]) || (!ascending && arr[i] < arr[j])) {
				double temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
		}
	}
}

// 배열을 출력하는 함수
void PrintArray(double *arr, int size, const char *msg) {
	printf("%s\n", msg);
	for (int i = 0; i < size; i++) {
		printf("%.2f ", arr[i]); // 소수점 2자리까지 출력
	}
	printf("\n");
}

int main() {
	int size = 10;               // 배열 크기
	double arr[10];              // 배열 선언
	double min = -100.0, max = 100.0; // 값의 범위
	int ascending;               // 정렬 옵션 (1: 오름차순, 0: 내림차순)

	srand((unsigned)time(NULL)); // 랜덤 시드 설정

	// 배열 랜덤 생성
	GenerateArray(arr, size, min, max);
	PrintArray(arr, size, "랜덤 생성된 배열:");

	// 정렬 옵션 입력
	printf("정렬 방법 선택 (1: 오름차순, 0: 내림차순): ");
	scanf_s("%d", &ascending);

	// 배열 정렬
	CalcSortArray(arr, size, ascending);
	PrintArray(arr, size, ascending ? "오름차순 정렬된 배열:" : "내림차순 정렬된 배열:");

	return 0;
}






---------------------------------------------2-----------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// 배열을 랜덤하게 생성하는 함수
void GenerateArray(double *arr, int size, double min, double max) {
	for (int i = 0; i < size; i++) {
		arr[i] = ((double)rand() / RAND_MAX) * (max - min) + min; // min ~ max 범위의 값 생성
	}
}

// 배열을 역순으로 계산하는 함수
void CalcInverseArray(double *arr, int size, double *reversedArr) {
	for (int i = 0; i < size; i++) {
		reversedArr[i] = arr[size - 1 - i]; // 원본 배열의 역순으로 값을 복사
	}
}

// 배열을 출력하는 함수
void PrintArray(double *arr, int size, const char *msg) {
	printf("%s\n", msg);
	for (int i = 0; i < size; i++) {
		printf("%.2f ", arr[i]); // 소수점 2자리까지 출력
	}
	printf("\n");
}

int main() {
	int size = 10;               // 배열 크기
	double arr[10];              // 원본 배열
	double reversedArr[10];      // 역순 배열
	double min = -100.0, max = 100.0; // 값의 범위

	srand((unsigned)time(NULL)); // 랜덤 시드 설정

	// 배열 랜덤 생성
	GenerateArray(arr, size, min, max);
	PrintArray(arr, size, "랜덤 생성된 배열:");

	// 배열 역순 계산
	CalcInverseArray(arr, size, reversedArr);
	PrintArray(reversedArr, size, "역순으로 계산된 배열:");

	return 0;
}







--------------------------------------------3------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define UNUSED -1 // 사용되지 않은 인덱스의 의미 표시

// 배열을 랜덤하게 생성하는 함수
void GenerateArray(int *arr, int size, int min, int max) {
    for (int i = 0; i < size; i++) {
        arr[i] = rand() % (max - min + 1) + min; // min ~ max 범위의 정수 생성
    }
}

// 배열에서 짝수와 홀수를 분리하는 함수
void CalcEvenOddArray(int *arr, int size, int *evenArr, int *oddArr) {
    int evenIndex = 0, oddIndex = 0;

    for (int i = 0; i < size; i++) {
        if (arr[i] % 2 == 0) {
            evenArr[evenIndex++] = arr[i]; // 짝수 배열에 추가
        } else {
            oddArr[oddIndex++] = arr[i]; // 홀수 배열에 추가
        }
    }

    // 남은 배열 공간을 UNUSED 값으로 채움
    for (int i = evenIndex; i < size; i++) {
        evenArr[i] = UNUSED;
    }
    for (int i = oddIndex; i < size; i++) {
        oddArr[i] = UNUSED;
    }
}

// 배열을 출력하는 함수
void PrintArray(int *arr, int size, const char *msg) {
    printf("%s\n", msg);
    for (int i = 0; i < size; i++) {
        if (arr[i] == UNUSED) {
            printf("X "); // UNUSED 값 표시
        } else {
            printf("%d ", arr[i]);
        }
    }
    printf("\n");
}

int main() {
    int size = 10;           // 배열 크기
    int arr[10];             // 원본 배열
    int evenArr[10];         // 짝수 배열
    int oddArr[10];          // 홀수 배열
    int min = 0, max = 100;  // 값의 범위

    srand((unsigned)time(NULL)); // 랜덤 시드 설정

    // 배열 랜덤 생성
    GenerateArray(arr, size, min, max);
    PrintArray(arr, size, "랜덤 생성된 배열:");

    // 짝수와 홀수 분리
    CalcEvenOddArray(arr, size, evenArr, oddArr);
    PrintArray(evenArr, size, "짝수 배열:");
    PrintArray(oddArr, size, "홀수 배열:");

    return 0;
}
